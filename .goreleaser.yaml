# yaml-language-server: $schema=https://goreleaser.com/static/schema.json

version: 2

project_name: go-web-server

before:
  hooks:
    - go mod tidy
    - go generate ./...

builds:
  - id: server
    main: ./cmd/web
    binary: server
    flags:
      - -trimpath
    ldflags:
      - -s -w 
      - -X main.version={{.Version}}
      - -X main.commit={{.Commit}}
      - -X main.date={{.Date}}
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - darwin
      - windows
    goarch:
      - amd64
      - arm64
    ignore:
      - goos: windows
        goarch: arm64

archives:
  - id: default
    format: tar.gz
    name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}"
    format_overrides:
      - goos: windows
        format: zip
    files:
      - README.md
      - LICENSE
      - docs/**/*
      - scripts/**/*
      - atlas.hcl
      - "*.md"

checksum:
  name_template: "checksums.txt"

changelog:
  sort: asc
  use: github
  filters:
    exclude:
      - "^docs:"
      - "^test:"
      - "^ci:"
      - "^chore:"
      - "^refactor:"
  groups:
    - title: Features
      regexp: "^.*feat[(\\w)]*:+.*$"
      order: 0
    - title: Bug fixes
      regexp: "^.*fix[(\\w)]*:+.*$"
      order: 1
    - title: Others
      order: 999

release:
  github:
    owner: dunamismax
    name: go-web-server
  draft: false
  prerelease: auto
  name_template: "{{.ProjectName}} v{{.Version}}"

brews:
  - repository:
      owner: dunamismax
      name: homebrew-tap
    folder: Formula
    homepage: "https://github.com/dunamismax/go-web-server"
    description: "A modern, fast, and secure Go web server"
    license: "MIT"
    test: |
      system "#{bin}/server --version"
    install: |
      bin.install "server"

nfpms:
  - id: server
    package_name: go-web-server
    vendor: dunamismax
    homepage: "https://github.com/dunamismax/go-web-server"
    maintainer: "dunamismax <noreply@github.com>"
    description: "A modern, fast, and secure Go web server"
    license: "MIT"
    formats:
      - deb
      - rpm
    bindir: /usr/bin
    section: utils
    priority: optional
    files:
      "scripts/gowebserver.service": "/etc/systemd/system/gowebserver.service"
    config_files:
      "docs/config.example.yaml": "/etc/gowebserver/config.yaml"
    scripts:
      postinstall: "scripts/postinstall.sh"
      preremove: "scripts/preremove.sh"

dockers:
  - image_templates:
      - "dunamismax/go-web-server:{{ .Version }}-amd64"
      - "dunamismax/go-web-server:latest-amd64"
    dockerfile: Dockerfile
    use: buildx
    build_flag_templates:
      - "--pull"
      - "--label=org.opencontainers.image.created={{.Date}}"
      - "--label=org.opencontainers.image.title={{.ProjectName}}"
      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
      - "--label=org.opencontainers.image.version={{.Version}}"
      - "--platform=linux/amd64"
  - image_templates:
      - "dunamismax/go-web-server:{{ .Version }}-arm64"
      - "dunamismax/go-web-server:latest-arm64"
    dockerfile: Dockerfile
    use: buildx
    build_flag_templates:
      - "--pull"
      - "--label=org.opencontainers.image.created={{.Date}}"
      - "--label=org.opencontainers.image.title={{.ProjectName}}"
      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
      - "--label=org.opencontainers.image.version={{.Version}}"
      - "--platform=linux/arm64"
    goarch: arm64

docker_manifests:
  - name_template: "dunamismax/go-web-server:{{ .Version }}"
    image_templates:
      - "dunamismax/go-web-server:{{ .Version }}-amd64"
      - "dunamismax/go-web-server:{{ .Version }}-arm64"
  - name_template: "dunamismax/go-web-server:latest"
    image_templates:
      - "dunamismax/go-web-server:latest-amd64"
      - "dunamismax/go-web-server:latest-arm64"

sboms:
  - artifacts: archive
  - artifacts: binary

# Configuration for signing the binaries and checksums
signs:
  - cmd: cosign
    env:
      - COSIGN_EXPERIMENTAL=1
    certificate: "${artifact}.pem"
    args:
      - sign-blob
      - "--output-certificate=${certificate}"
      - "--output-signature=${signature}"
      - "${artifact}"
      - "--yes" # needed on cosign 2.0.0+
    artifacts: checksum
    output: true

# Sign Docker images
docker_signs:
  - cmd: cosign
    env:
      - COSIGN_EXPERIMENTAL=1
    artifacts: images
    output: true
    args:
      - "sign"
      - "${artifact}@${digest}"
      - "--yes" # needed on cosign 2.0.0+