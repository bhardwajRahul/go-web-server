# Caddyfile for Go Web Server
# Replace example.com with your actual domain

# For local development
localhost, localhost:80, localhost:443 {
	# Reverse proxy to Go app
	reverse_proxy app:8080 {
		# Health check
		health_uri /health
		health_interval 30s
		health_timeout 10s
		
		# Load balancing
		lb_policy round_robin
	}

	# Enable compression
	encode gzip zstd

	# Security headers (additional to Go app's built-in headers)
	header {
		# Remove server info
		-Server
		
		# Additional security headers
		Permissions-Policy "geolocation=(), microphone=(), camera=()"
		Referrer-Policy "strict-origin-when-cross-origin"
	}

	# Logging
	log {
		output stdout
		format console
		level INFO
	}

	# Access logging
	access_log stdout {
		format console
	}
}

# Production domain configuration (uncomment and configure for production)
# yourdomain.com, www.yourdomain.com {
#	# Automatic HTTPS with Let's Encrypt
#	tls {
#		protocols tls1.2 tls1.3
#	}
#
#	# Reverse proxy to Go app
#	reverse_proxy app:8080 {
#		# Health check
#		health_uri /health
#		health_interval 30s
#		health_timeout 10s
#		
#		# Load balancing
#		lb_policy round_robin
#	}
#
#	# Enable compression
#	encode gzip zstd
#
#	# Security headers (additional to Go app's built-in headers)
#	header {
#		# Remove server info
#		-Server
#		
#		# Additional security headers
#		Permissions-Policy "geolocation=(), microphone=(), camera=()"
#		Referrer-Policy "strict-origin-when-cross-origin"
#		
#		# HSTS (Strict Transport Security)
#		Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
#	}
#
#	# Rate limiting (additional protection)
#	rate_limit {
#		zone static {
#			key {remote_host}
#			events 100
#			window 1m
#		}
#	}
#
#	# Logging
#	log {
#		output file /data/access.log {
#			roll_size 100MiB
#			roll_keep 5
#			roll_keep_for 720h
#		}
#		format json
#		level INFO
#	}
# }