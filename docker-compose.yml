services:
  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: gowebserver-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./internal/store/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - gowebserver-network

  # Go Web Server Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gowebserver-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database configuration
      DATABASE_DRIVER: postgres
      DATABASE_URL: postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}?sslmode=disable
      
      # Server configuration
      HTTP_HOST: 0.0.0.0
      HTTP_PORT: 8080
      
      # Environment
      ENVIRONMENT: production
      
      # Feature flags (Viper format with underscores)
      FEATURES_ENABLE_CSRF: "true" 
      FEATURES_ENABLE_METRICS: "true"
      
      # CORS (if needed for API access)
      SECURITY_ENABLE_CORS: "false"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - gowebserver-network

  # Caddy reverse proxy
  caddy:
    image: caddy:2-alpine
    container_name: gowebserver-caddy
    restart: unless-stopped
    depends_on:
      app:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - gowebserver-network

networks:
  gowebserver-network:
    driver: bridge

volumes:
  postgres_data:
  caddy_data:
  caddy_config: