package view

import (
	"fmt"
	"github.com/dunamismax/go-web-server/internal/view/layout"
)

templ Home() {
	@layout.Base("Home") {
		@HomeContent()
	}
}

templ HomeWithCSRF(csrfToken string) {
	@layout.BaseWithCSRF("Home", csrfToken) {
		@HomeContent()
	}
}

templ HomeContent() {
	<section>
		<hgroup>
			<h1>The Modern Go Stack</h1>
			<p>The ideal perfect launch point for your next web application or website project</p>
		</hgroup>
		<div class="grid">
			<div>
				<p>
					<strong>Production Ready:</strong> A cohesive technology stack for building high-performance, maintainable applications. 
					Creates single, self-contained binaries with zero external dependencies using Go 1.24+, Echo v4, HTMX 2.x, Templ, and Pico.css v2.
				</p>
			</div>
			<div style="text-align: center;">
				<button
					onclick="document.getElementById('demo-area').scrollIntoView({ behavior: 'smooth', block: 'center' }); setTimeout(() => { document.querySelector('#demo-area button[hx-get=\'/demo\']').click(); }, 500);"
					class="contrast"
					style="font-size: 18px; padding: 16px 32px; font-weight: 600;"
				>
					Try Live Demo
				</button>
				<br/>
				<br/>
				<small style="color: var(--pico-color-grey-600);">Scroll down to see the demo area</small>
			</div>
		</div>
	</section>
	<section>
		<h2>Why The Modern Go Stack?</h2>
		<div class="grid">
			<article>
				<header>
					<h4>High Performance</h4>
				</header>
				<p>
					<strong>Echo v4 + Go 1.24+:</strong> Lightning-fast HTTP framework with the latest Go performance improvements. 
					Built for speed with HTTP/2 support and optimized middleware stack.
				</p>
				<details>
					<summary role="button" class="secondary outline">Learn More</summary>
					<ul>
						<li>Optimized HTTP router without dynamic memory allocation</li>
						<li>HTTP/2 support for enhanced speed</li>
						<li>Automatic TLS with Let's Encrypt integration</li>
						<li>Rich middleware ecosystem for security and logging</li>
					</ul>
				</details>
			</article>
			<article>
				<header>
					<h4>Enterprise Security</h4>
				</header>
				<p>
					<strong>SQLC + Templ:</strong> Type-safe database operations and compile-time validated templates eliminate runtime errors. 
					Includes CSRF protection, input sanitization, and structured error handling.
				</p>
				<details>
					<summary role="button" class="secondary outline">Learn More</summary>
					<ul>
						<li>No runtime template parsing errors</li>
						<li>Full IDE support with autocompletion</li>
						<li>Type-safe database operations</li>
						<li>Compile-time validation for all templates</li>
					</ul>
				</details>
			</article>
			<article>
				<header>
					<h4>Modern Developer Experience</h4>
				</header>
				<p>
					<strong>HTMX 2.x + Pico.css v2:</strong> Dynamic interactions without JavaScript complexity. 
					Hot reload with Air, Mage build automation, and beautiful responsive design with dark/light themes.
				</p>
				<details>
					<summary role="button" class="secondary outline">Learn More</summary>
					<ul>
						<li>Automatic dark/light theme switching</li>
						<li>Server-driven UI updates via HTMX</li>
						<li>20+ color themes available</li>
						<li>Responsive design out of the box</li>
					</ul>
				</details>
			</article>
		</div>
	</section>
	<section>
		<h2>Quick Actions</h2>
		<div class="grid">
			<div role="group" style="display: flex; flex-wrap: wrap; gap: 1rem; justify-content: center;">
				<button
					hx-get="/demo"
					hx-target="#demo-area"
					hx-swap="innerHTML swap:0s settle:0s"
					hx-trigger="click"
					hx-indicator=".demo-indicator"
					style="min-width: 140px;"
				>
					Show Demo
					<span class="demo-indicator htmx-indicator css-spinner" style="margin-left: 0.5rem;" aria-hidden="true"></span>
				</button>
				<button
					hx-get="/users/list"
					hx-target="#demo-area"
					hx-swap="innerHTML swap:0s settle:0s"
					hx-trigger="click"
					hx-indicator=".users-indicator"
					class="secondary"
					style="min-width: 140px;"
				>
					Load Users
					<span class="users-indicator htmx-indicator css-spinner" style="margin-left: 0.5rem;" aria-hidden="true"></span>
				</button>
				<button
					hx-get="/health"
					hx-target="#demo-area"
					hx-swap="innerHTML swap:0s settle:0s"
					class="outline"
					hx-indicator=".health-indicator"
					style="min-width: 140px;"
				>
					Health Check
					<span class="health-indicator htmx-indicator css-spinner" style="margin-left: 0.5rem;" aria-hidden="true"></span>
				</button>
			</div>
		</div>
	</section>
	<section>
		<div id="demo-area" style="scroll-margin-top: 2rem;">
			<article style="border: 2px dashed var(--go-cyan); background: rgba(0, 173, 216, 0.05);">
				<header>
					<h4>Interactive Demo Area</h4>
				</header>
				<p>Click the buttons above to see HTMX in action! This area will be dynamically updated with content from the server using partial page updates.</p>
				<div class="grid">
					<div>
						<p><small><strong>Developer Tip:</strong> Open your browser's Network tab to see how HTMX makes efficient partial page updates with zero JavaScript!</small></p>
					</div>
					<div style="text-align: center;">
						<small style="color: var(--go-blue); font-weight: 600;">Try the buttons above</small>
					</div>
				</div>
			</article>
		</div>
	</section>
	<section>
		<h2>What's Included</h2>
		<div class="grid">
			<div>
				<h5>Development Experience</h5>
				<ul>
					<li>Hot reloading with <strong>Air</strong></li>
					<li>Database migrations with <strong>Goose</strong></li>
					<li>Structured logging with <strong>slog</strong></li>
					<li><strong>Mage</strong> build automation</li>
					<li>Multi-source config with <strong>Viper</strong></li>
				</ul>
			</div>
			<div>
				<h5>Production Features</h5>
				<ul>
					<li>Single binary deployment <strong>(~15MB)</strong></li>
					<li>Embedded static assets</li>
					<li>Graceful shutdown handling</li>
					<li>Enterprise security & monitoring</li>
					<li><strong>Zero external dependencies</strong></li>
				</ul>
			</div>
			<div>
				<h5>Modern Architecture</h5>
				<ul>
					<li>Clean separation of concerns</li>
					<li>Type-safe queries with <strong>SQLC</strong></li>
					<li>Component-based <strong>Templ</strong> templates</li>
					<li>Progressive enhancement with <strong>HTMX</strong></li>
					<li><strong>High-performance</strong> PostgreSQL with pgx driver</li>
				</ul>
			</div>
		</div>
	</section>
	<section>
		<article>
			<header>
				<h3>Perfect For</h3>
			</header>
			<div class="grid">
				<div>
					<p>
						<strong>Web Applications:</strong>
						Build full-stack apps with server-side rendering and dynamic client interactions.
					</p>
				</div>
				<div>
					<p>
						<strong>REST APIs:</strong>
						Create high-performance APIs with type-safe database operations.
					</p>
				</div>
				<div>
					<p>
						<strong>Enterprise Apps:</strong>
						Production-ready template with security, logging, and configuration best practices.
					</p>
				</div>
			</div>
		</article>
	</section>
}

templ DemoContent(message string, features []string, serverTime, requestID string) {
	<article class="fade-in">
		<header>
			<h4>Live Demo Results</h4>
		</header>
		<p><strong>{ message }</strong></p>
		<div class="grid">
			<div>
				<h6>Features Demonstrated:</h6>
				<ul>
					for _, feature := range features {
						<li>{ feature }</li>
					}
				</ul>
			</div>
			<div>
				<h6>Technical Details:</h6>
				<p><small><strong>Server Time:</strong> { serverTime }</small></p>
				if requestID != "" {
					<p><small><strong>Request ID:</strong> { requestID }</small></p>
				}
				<p><small><strong>Content Type:</strong> Server-rendered HTML</small></p>
				<p><small><strong>Method:</strong> HTMX partial page update</small></p>
			</div>
		</div>
		<footer>
			<div role="group">
				<button
					hx-get="/demo"
					hx-target="#demo-area"
					hx-swap="innerHTML"
					class="secondary"
				>
					Reload Demo
				</button>
				<button
					hx-get="/health"
					hx-target="#demo-area"
					hx-swap="innerHTML"
					class="outline"
				>
					System Health
				</button>
			</div>
		</footer>
	</article>
}

templ HealthCheck(status, service, version, uptime, timestamp string, checks map[string]string) {
	<article>
		<header>
			<h4>System Health Check</h4>
		</header>
		<div class="grid">
			<div>
				<h6>Service Status</h6>
				<p>
					<strong>Status:</strong>
					if status == "ok" {
						<span style="color: var(--pico-color-green-600)">✓ { status }</span>
					} else {
						<span style="color: var(--pico-color-red-600)">✗ { status }</span>
					}
				</p>
				<p><strong>Service:</strong> { service }</p>
				<p><strong>Version:</strong> { version }</p>
				<p><strong>Uptime:</strong> { uptime }</p>
			</div>
			<div>
				<h6>Component Checks</h6>
				for component, checkStatus := range checks {
					<p>
						<strong>{ fmt.Sprintf("%s:", component) }</strong>
						if checkStatus == "ok" {
							<span style="color: var(--pico-color-green-600)">✓ { checkStatus }</span>
						} else {
							<span style="color: var(--pico-color-red-600)">✗ { checkStatus }</span>
						}
					</p>
				}
			</div>
		</div>
		<footer>
			<small><strong>Last checked:</strong> { timestamp }</small>
		</footer>
	</article>
}
