package view

import "github.com/dunamismax/go-web-server/internal/view/layout"

templ Home() {
	@layout.Base("Home") {
		@HomeContent()
	}
}

templ HomeContent() {
	<section>
		<hgroup>
			<h1>Modern Go Web Server</h1>
			<p>The perfect, reusable template for building modern web applications with radical simplicity</p>
		</hgroup>
		<div class="grid">
			<div>
				<p>
					<strong>Production Ready:</strong> Built with Go 1.24+, Echo v4, HTMX 2.x, templ, and Pico.css v2.
					Features single binary deployment, type-safe queries, and modern tooling.
				</p>
			</div>
			<div>
				<button
					hx-get="/users/list"
					hx-target="#demo-area"
					hx-swap="innerHTML"
					hx-trigger="click"
					class="contrast"
				>
					<span>Try Live Demo</span>
					<span class="htmx-indicator" aria-hidden="true">Loading...</span>
				</button>
			</div>
		</div>
	</section>
	<section>
		<h2>Tech Stack Features</h2>
		<div class="grid">
			<article>
				<header>
					<h4>Performance First</h4>
				</header>
				<p>
					<strong>Echo Framework:</strong> High-performance HTTP router with middleware support.
					<br/>
					<strong>Go 1.24:</strong> Latest performance improvements and language features.
				</p>
				<details>
					<summary role="button" class="secondary outline">Learn More</summary>
					<ul>
						<li>Optimized HTTP router without dynamic memory allocation</li>
						<li>HTTP/2 support for enhanced speed</li>
						<li>Automatic TLS with Let's Encrypt integration</li>
						<li>Rich middleware ecosystem for security and logging</li>
					</ul>
				</details>
			</article>
			<article>
				<header>
					<h4>Type Safety</h4>
				</header>
				<p>
					<strong>SQLC:</strong> Generate type-safe Go code from SQL queries.
					<br/>
					<strong>Templ:</strong> Compile-time validated HTML templates.
				</p>
				<details>
					<summary role="button" class="secondary outline">Learn More</summary>
					<ul>
						<li>No runtime template parsing errors</li>
						<li>Full IDE support with autocompletion</li>
						<li>Type-safe database operations</li>
						<li>Compile-time validation for all templates</li>
					</ul>
				</details>
			</article>
			<article>
				<header>
					<h4>Modern UI/UX</h4>
				</header>
				<p>
					<strong>HTMX 2.x:</strong> Dynamic interactions without JavaScript complexity.
					<br/>
					<strong>Pico.css v2:</strong> Beautiful semantic CSS with dark mode.
				</p>
				<details>
					<summary role="button" class="secondary outline">Learn More</summary>
					<ul>
						<li>Automatic dark/light theme switching</li>
						<li>Server-driven UI updates via HTMX</li>
						<li>20+ color themes available</li>
						<li>Responsive design out of the box</li>
					</ul>
				</details>
			</article>
		</div>
	</section>
	<section>
		<h2>Quick Actions</h2>
		<div class="grid">
			<div role="group">
				<button
					hx-get="/users/list"
					hx-target="#demo-area"
					hx-swap="innerHTML"
					hx-trigger="click"
				>
					Load Users
					<span class="htmx-indicator" aria-hidden="true">Loading...</span>
				</button>
				<button
					hx-get="/health"
					hx-target="#demo-area"
					hx-swap="innerHTML"
					class="secondary"
				>
					Health Check
				</button>
				<button
					onclick="showFlash('Hello from the Modern Go Stack!', 'success')"
					class="outline"
				>
					Test Flash Message
				</button>
			</div>
		</div>
	</section>
	<section>
		<div id="demo-area">
			<article>
				<header>
					<h4>Interactive Demo Area</h4>
				</header>
				<p>Click the buttons above to see HTMX in action. This area will be dynamically updated with content from the server.</p>
				<p>
					<small>
						<strong>Developer Tip:</strong>
						Check the network tab to see how HTMX makes partial page updates with minimal JavaScript.
					</small>
				</p>
			</article>
		</div>
	</section>
	<section>
		<h2>What's Included</h2>
		<div class="grid">
			<div>
				<h5>Development Tools</h5>
				<ul>
					<li>Hot reloading with <code>go generate</code></li>
					<li>Database migrations with golang-migrate</li>
					<li>Structured logging with slog</li>
					<li>Production-ready configuration</li>
				</ul>
			</div>
			<div>
				<h5>Production Features</h5>
				<ul>
					<li>Single binary deployment</li>
					<li>Embedded static assets</li>
					<li>Graceful shutdown handling</li>
					<li>Security middleware & CORS</li>
				</ul>
			</div>
			<div>
				<h5>Modern Patterns</h5>
				<ul>
					<li>Clean architecture with separation of concerns</li>
					<li>Repository pattern with SQLC</li>
					<li>Component-based templates</li>
					<li>Progressive enhancement with HTMX</li>
				</ul>
			</div>
		</div>
	</section>
	<section>
		<article>
			<header>
				<h3>Perfect For</h3>
			</header>
			<div class="grid">
				<div>
					<p>
						<strong>Web Applications:</strong>
						Build full-stack apps with server-side rendering and dynamic client interactions.
					</p>
				</div>
				<div>
					<p>
						<strong>REST APIs:</strong>
						Create high-performance APIs with type-safe database operations.
					</p>
				</div>
				<div>
					<p>
						<strong>Enterprise Apps:</strong>
						Production-ready template with security, logging, and configuration best practices.
					</p>
				</div>
			</div>
		</article>
	</section>
}
