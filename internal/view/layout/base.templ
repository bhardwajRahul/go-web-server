package layout

templ Base(title string) {
	@BaseWithCSRF(title, "")
}

templ BaseWithCSRF(title, csrfToken string) {
	<!DOCTYPE html>
	<html lang="en" data-theme="dark">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover"/>
			<meta name="color-scheme" content="light dark"/>
			<meta name="description" content="Modern Go Web Server Template with Echo, templ, HTMX, and Pico.css"/>
			<title>{ title } - Go Web Server</title>
			<link rel="icon" type="image/x-icon" href="/static/favicon.ico"/>
			<link rel="preconnect" href="https://fonts.googleapis.com"/>
			<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
			<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet"/>
			<link rel="stylesheet" href="/static/css/pico.min.css"/>
			<script src="/static/js/htmx.min.js"></script>
			<meta name="csrf-header" content="X-CSRF-Token"/>
			if csrfToken != "" {
				<meta name="csrf-token" content={ csrfToken }/>
			}
			<meta name="htmx-config" content='{"globalViewTransitions": true, "requestClass": "htmx-request", "timeout": 10000}'/>
			<style>
				/* Custom theme enhancements - Go/Golang color palette */
				:root {
					/* Golang brand colors */
					--go-blue: #00ADD8;
					--go-cyan: #5DC9E2;
					--go-purple: #375EAB;
					--go-green: #40C463;
					--go-dark-blue: #2F5F8F;
					
					/* Override Pico colors with Go theme */
					--pico-primary-600: var(--go-blue);
					--pico-primary-700: var(--go-purple);
					--pico-color-primary-600: var(--go-blue);
					--pico-color-primary-700: var(--go-purple);
					
					/* Inter font family */
					--pico-font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
					
					/* Minimum 16px font sizes */
					--pico-font-size: 16px;
					--pico-line-height: 1.6;
				}
				
				[data-theme="dark"] {
					--pico-primary-600: var(--go-cyan);
					--pico-primary-700: var(--go-blue);
					--pico-color-primary-600: var(--go-cyan);
					--pico-color-primary-700: var(--go-blue);
					
					/* Enhance contrast for dark theme */
					--pico-contrast-600: var(--go-green);
					--pico-contrast-700: #32A852;
				}
				
				/* Inter font application and minimum font sizes */
				body {
					font-family: var(--pico-font-family);
					font-size: max(16px, var(--pico-font-size));
					line-height: var(--pico-line-height);
					transition: opacity 0.15s ease-out !important;
				}
				
				/* Ensure minimum 16px across all text elements */
				p, li, td, th, span, div, label, input, textarea, select, button {
					font-size: max(16px, 1rem);
					font-family: var(--pico-font-family);
				}
				
				h1, h2, h3, h4, h5, h6 {
					font-family: var(--pico-font-family);
					font-weight: 600;
				}
				
				h1 { font-size: max(32px, 2rem); }
				h2 { font-size: max(28px, 1.75rem); }
				h3 { font-size: max(24px, 1.5rem); }
				h4 { font-size: max(20px, 1.25rem); }
				h5 { font-size: max(18px, 1.125rem); }
				h6 { font-size: max(16px, 1rem); }
				
				small, .small {
					font-size: max(14px, 0.875rem) !important;
				}
				
				/* Ultra-smooth SPA-like transitions */
				* {
					transition: all 0.12s ease-out;
				}
				
				main {
					will-change: transform, opacity;
					backface-visibility: hidden;
					transform: translateZ(0);
				}
				
				/* Optimized transitions for interactive elements */
				input, textarea, select, button {
					transition: background-color 0.15s ease-out, border-color 0.15s ease-out, color 0.15s ease-out, transform 0.15s ease-out !important;
				}
				
				button:hover {
					transform: translateY(-1px);
				}
				
				button:active {
					transform: translateY(0);
				}
				
				.htmx-request {
					opacity: 0.8;
					transition: opacity 0.2s ease-in-out !important;
				}
				
				.htmx-indicator {
					display: none;
				}
				
				.htmx-request .htmx-indicator {
					display: inline;
				}
				
				/* Go-themed CSS Spinner */
				.css-spinner {
					width: 16px;
					height: 16px;
					border: 2px solid var(--pico-color-grey-300);
					border-top: 2px solid var(--go-blue);
					border-radius: 50%;
					animation: css-spin 1s linear infinite;
				}
				
				[data-theme="dark"] .css-spinner {
					border-color: var(--pico-color-grey-600);
					border-top-color: var(--go-cyan);
				}
				
				@keyframes css-spin {
					0% { transform: rotate(0deg); }
					100% { transform: rotate(360deg); }
				}
				
				/* Go-themed page transition indicator */
				.page-loading {
					position: fixed;
					top: 0;
					left: 0;
					width: 100%;
					height: 3px;
					background: linear-gradient(90deg, var(--go-blue), var(--go-cyan), var(--go-purple), var(--go-blue));
					background-size: 300% 100%;
					z-index: 9999;
					opacity: 0;
					transform: scaleX(0);
					transform-origin: left;
					transition: opacity 0.1s ease-out, transform 0.15s ease-out;
				}
				
				.page-loading.active {
					opacity: 0.8;
					transform: scaleX(1);
					animation: shimmer 0.8s ease-in-out;
				}
				
				@keyframes shimmer {
					0% { background-position: 200% 0; }
					100% { background-position: -200% 0; }
				}
				
				/* Navigation link styling for HTMX */
				nav a[hx-get] {
					position: relative;
					transition: all 0.15s ease-out !important;
				}
				
				nav a[hx-get]:hover {
					transform: translateY(-1px);
					text-decoration: none;
				}
				
				nav a[hx-get]:active {
					transform: translateY(0);
				}
				
				/* Go-themed flash messages */
				.flash {
					padding: 1rem;
					margin: 1rem 0;
					border-radius: var(--pico-border-radius);
					font-size: max(16px, 1rem);
					font-weight: 500;
				}
				
				.flash.success {
					background-color: rgba(64, 196, 99, 0.1);
					color: var(--go-green);
					border: 1px solid rgba(64, 196, 99, 0.3);
				}
				
				.flash.error {
					background-color: rgba(220, 38, 127, 0.1);
					color: #ff6b9d;
					border: 1px solid rgba(220, 38, 127, 0.3);
				}
				
				[data-theme="dark"] .flash.success {
					background-color: rgba(64, 196, 99, 0.15);
					color: #5FE584;
					border-color: rgba(64, 196, 99, 0.4);
				}
				
				[data-theme="dark"] .flash.error {
					background-color: rgba(220, 38, 127, 0.15);
					color: #ff8fb3;
					border-color: rgba(220, 38, 127, 0.4);
				}
				
				/* Smooth animations */
				@keyframes fadeIn {
					from { opacity: 0; transform: translateY(8px); }
					to { opacity: 1; transform: translateY(0); }
				}
				
				@keyframes slideIn {
					from { opacity: 0; transform: translateX(-10px); }
					to { opacity: 1; transform: translateX(0); }
				}
				
				.fade-in {
					animation: fadeIn 0.2s ease-out;
				}
				
				.slide-in {
					animation: slideIn 0.2s ease-out;
				}
				
				/* User avatar */
				.avatar {
					width: 2rem;
					height: 2rem;
					border-radius: 50%;
					object-fit: cover;
				}
				
				.avatar-lg {
					width: 4rem;
					height: 4rem;
				}
				
				/* Mobile-first responsive design */
				@media (max-width: 768px) {
					.container {
						padding: 1rem;
					}
					
					h1 { font-size: max(28px, 1.75rem); }
					h2 { font-size: max(24px, 1.5rem); }
					h3 { font-size: max(20px, 1.25rem); }
					h4 { font-size: max(18px, 1.125rem); }
					
					/* Stack navigation vertically on mobile */
					header nav ul {
						flex-direction: column;
						gap: 0.5rem;
					}
					
					header nav ul:last-child {
						margin-top: 1rem;
					}
					
					/* Better mobile grid */
					.grid {
						grid-template-columns: 1fr !important;
						gap: 1rem !important;
					}
					
					/* Mobile-friendly buttons */
					button, [role="button"] {
						min-height: 48px;
						padding: 12px 16px;
						font-size: max(16px, 1rem);
					}
					
					/* Touch-friendly links */
					a {
						min-height: 44px;
						display: inline-flex;
						align-items: center;
						padding: 8px 0;
					}
					
					/* Mobile article spacing */
					article {
						margin-bottom: 2rem;
						padding: 1.5rem;
					}
					
					/* Mobile-optimized demo area */
					#demo-area {
						margin-top: 2rem;
						padding: 1rem;
					}
				}
				
				/* Tablet and small desktop improvements */
				@media (min-width: 769px) and (max-width: 1024px) {
					.container {
						max-width: 100%;
						padding: 2rem;
					}
					
					.grid {
						grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
					}
				}
				
				/* Enhanced hover and focus states for accessibility */
				@media (hover: hover) {
					button:hover, [role="button"]:hover {
						transform: translateY(-2px);
						box-shadow: 0 4px 12px rgba(0, 173, 216, 0.2);
					}
					
					a:hover {
						color: var(--go-cyan);
						transition: color 0.2s ease;
					}
				}
				
				/* Focus styles for accessibility */
				button:focus-visible, [role="button"]:focus-visible, 
				a:focus-visible, input:focus-visible, select:focus-visible, textarea:focus-visible {
					outline: 2px solid var(--go-cyan);
					outline-offset: 2px;
				}
				
				/* Reduce motion for users who prefer it */
				@media (prefers-reduced-motion: reduce) {
					*, *::before, *::after {
						animation-duration: 0.01ms !important;
						animation-iteration-count: 1 !important;
						transition-duration: 0.01ms !important;
						scroll-behavior: auto !important;
					}
				}
				
				/* Dark theme specific mobile improvements */
				[data-theme="dark"] {
					/* Better contrast for readability on mobile */
					--pico-contrast: #ffffff;
					--pico-background-color: #11191f;
				}
				
				/* Print styles */
				@media print {
					body {
						background: white !important;
						color: black !important;
					}
					
					header, footer, nav, .no-print {
						display: none !important;
					}
					
					a {
						color: black !important;
						text-decoration: underline;
					}
				}
			</style>
		</head>
		<body>
			<header>
				<nav class="container">
					<ul>
						<li>
							<strong>
								<a href="/" class="contrast">
									Go Web Server
								</a>
							</strong>
						</li>
					</ul>
					<ul>
						<li>
							<a
								href="/"
								hx-get="/"
								hx-target="main"
								hx-swap="innerHTML swap:0s settle:0s"
								hx-push-url="true"
							>Home</a>
						</li>
						<li>
							<a
								href="/users"
								hx-get="/users"
								hx-target="main"
								hx-swap="innerHTML swap:0s settle:0s"
								hx-push-url="true"
							>Users</a>
						</li>
						<li>
							<details role="list">
								<summary aria-haspopup="listbox" role="button">Theme</summary>
								<ul role="listbox">
									<li><a onclick="setTheme('auto')" href="#">Auto</a></li>
									<li><a onclick="setTheme('light')" href="#">Light</a></li>
									<li><a onclick="setTheme('dark')" href="#">Dark</a></li>
								</ul>
							</details>
						</li>
					</ul>
				</nav>
			</header>
			<div id="page-loading" class="page-loading"></div>
			<main class="container">
				<div id="flash-messages"></div>
				{ children... }
			</main>
			<footer class="container">
				<hr/>
				<div class="grid">
					<div>
						<p><small>Built with Go 1.24, Echo, templ, HTMX 2.x, and Pico.css v2 &copy; 2025</small></p>
					</div>
					<div style="text-align: right;">
						<p>
							<small>
								<a
									href="/health"
									hx-get="/health"
									hx-trigger="click"
									hx-swap="innerHTML"
									class="contrast"
								>
									Health Check
								</a>
							</small>
						</p>
					</div>
				</div>
			</footer>
			<script>
				// Theme switcher with localStorage persistence
				function setTheme(theme) {
					document.documentElement.setAttribute('data-theme', theme);
					localStorage.setItem('preferred-theme', theme);
				}
				
				// Initialize theme on page load
				document.addEventListener('DOMContentLoaded', function() {
					const savedTheme = localStorage.getItem('preferred-theme') || 'dark';
					setTheme(savedTheme);
				});
				
				// HTMX configuration for smooth page transitions
				document.addEventListener('DOMContentLoaded', function() {
					// Configure HTMX globally for smooth SPA-like experience
					htmx.config.globalViewTransitions = true;
					htmx.config.defaultSwapStyle = 'innerHTML';
					htmx.config.requestClass = 'htmx-request';
					htmx.config.timeout = 10000;
					htmx.config.defaultSwapDelay = 0;
					htmx.config.defaultSettleDelay = 0;
					
					// Track current CSRF token
					let currentCSRFToken = null;
					
					// Initialize CSRF token from page load or fetch it
					const initializeCSRFToken = () => {
						// First try to get token from a meta tag (set by server)
						const metaToken = document.querySelector('meta[name="csrf-token"]');
						if (metaToken) {
							currentCSRFToken = metaToken.getAttribute('content');
							return;
						}
						
						// If no meta token, make a request to get one
						fetch('/users', {
							method: 'GET',
							headers: {
								'X-Requested-With': 'XMLHttpRequest'
							}
						}).then(response => {
							const token = response.headers.get('X-CSRF-Token');
							if (token) {
								currentCSRFToken = token;
							}
						}).catch(e => {
							console.warn('Failed to initialize CSRF token:', e);
						});
					};
					
					// Initialize CSRF token on page load
					initializeCSRFToken();
					
					// Configure CSRF token handling
					document.body.addEventListener('htmx:configRequest', function(evt) {
						if (currentCSRFToken) {
							evt.detail.headers['X-CSRF-Token'] = currentCSRFToken;
						}
					});
					
					// Update CSRF token from responses
					document.body.addEventListener('htmx:afterRequest', function(evt) {
						const newToken = evt.detail.xhr.getResponseHeader('X-CSRF-Token');
						if (newToken) {
							currentCSRFToken = newToken;
						}
					});
					
					// Ultra-smooth SPA-like page transitions
					const pageLoading = document.getElementById('page-loading');
					
					// Minimal loading indication for page navigation
					document.body.addEventListener('htmx:beforeRequest', function(evt) {
						if (evt.detail.target.tagName === 'MAIN') {
							pageLoading.classList.add('active');
						}
					});
					
					// Instant and smooth content transitions
					document.body.addEventListener('htmx:beforeSwap', function(evt) {
						if (evt.detail.target.tagName === 'MAIN') {
							// Prep for ultra-smooth transition
							evt.detail.target.style.transition = 'none';
							evt.detail.target.style.opacity = '0.9';
						}
					});
					
					document.body.addEventListener('htmx:afterSwap', function(evt) {
						if (evt.detail.target.tagName === 'MAIN') {
							pageLoading.classList.remove('active');
							
							// Immediate smooth fade-in
							const target = evt.detail.target;
							target.style.opacity = '0';
							target.style.transform = 'translateY(3px)';
							target.style.transition = 'opacity 0.15s ease-out, transform 0.15s ease-out';
							
							// Ultra-fast animation using RAF
							requestAnimationFrame(() => {
								requestAnimationFrame(() => {
									target.style.opacity = '1';
									target.style.transform = 'translateY(0)';
								});
							});
							
							// Re-initialize theme
							const savedTheme = localStorage.getItem('preferred-theme') || 'dark';
							setTheme(savedTheme);
						}
					});
					
					// Handle errors
					document.body.addEventListener('htmx:responseError', function(evt) {
						pageLoading.classList.remove('active');
						showFlash('Failed to load page. Please try again.', 'error');
					});
					
					document.body.addEventListener('htmx:timeout', function(evt) {
						pageLoading.classList.remove('active');
						showFlash('Request timed out. Please try again.', 'error');
					});
					
					// Handle successful operations (only for actual user actions, not data loading)
					document.body.addEventListener('htmx:afterRequest', function(evt) {
						if (evt.detail.xhr.status >= 200 && evt.detail.xhr.status < 300 && 
						    evt.detail.target.tagName !== 'MAIN' &&
						    evt.detail.target.id !== 'demo-area' &&
						    // Only show flash for write operations (POST, PUT, PATCH, DELETE)
						    ['POST', 'PUT', 'PATCH', 'DELETE'].includes(evt.detail.xhr.method || evt.detail.requestConfig.verb)) {
							showFlash('Operation completed successfully!', 'success');
						}
					});
				});
				
				// Flash message system
				function showFlash(message, type) {
					// Wait for DOM to be ready if needed
					const showFlashMessage = () => {
						const flashContainer = document.getElementById('flash-messages');
						if (!flashContainer) {
							console.warn('Flash messages container not found');
							return;
						}
						
						const flash = document.createElement('div');
						flash.className = `flash ${type} fade-in`;
						flash.textContent = message;
						
						flashContainer.innerHTML = '';
						flashContainer.appendChild(flash);
						
						// Auto-remove after 5 seconds
						setTimeout(() => {
							if (flash.parentNode) {
								flash.remove();
							}
						}, 5000);
					};
					
					// Use a more robust method to ensure DOM is ready
					const tryShowFlash = () => {
						const flashContainer = document.getElementById('flash-messages');
						if (flashContainer) {
							showFlashMessage();
						} else {
							// Retry up to 10 times with increasing delays
							let attempts = 0;
							const checkForContainer = () => {
								attempts++;
								const container = document.getElementById('flash-messages');
								if (container) {
									showFlashMessage();
								} else if (attempts < 10) {
									setTimeout(checkForContainer, attempts * 50);
								} else {
									console.warn('Flash messages container not found after multiple attempts');
								}
							};
							setTimeout(checkForContainer, 50);
						}
					};
					
					if (document.readyState === 'loading') {
						document.addEventListener('DOMContentLoaded', tryShowFlash);
					} else {
						tryShowFlash();
					}
				}
			</script>
		</body>
	</html>
}
