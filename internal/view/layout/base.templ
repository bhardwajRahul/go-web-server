package layout

templ Base(title string) {
	<!DOCTYPE html>
	<html lang="en" data-theme="auto">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<meta name="color-scheme" content="light dark"/>
			<meta name="description" content="Modern Go Web Server Template with Echo, templ, HTMX, and Pico.css"/>
			<title>{ title } - Go Web Server</title>
			<link rel="icon" type="image/x-icon" href="/static/favicon.ico"/>
			<link rel="stylesheet" href="/static/css/pico.min.css"/>
			<script src="/static/js/htmx.min.js"></script>
			<style>
				/* Custom theme enhancements */
				:root {
					--pico-primary-600: #3b82f6;
					--pico-primary-700: #2563eb;
				}
				
				[data-theme="dark"] {
					--pico-primary-600: #60a5fa;
					--pico-primary-700: #3b82f6;
				}
				
				/* Ultra-smooth SPA-like transitions */
				* {
					transition: all 0.12s ease-out;
				}
				
				body {
					transition: opacity 0.15s ease-out !important;
				}
				
				main {
					will-change: transform, opacity;
					backface-visibility: hidden;
					transform: translateZ(0);
				}
				
				/* Optimized transitions for interactive elements */
				input, textarea, select, button {
					transition: background-color 0.15s ease-out, border-color 0.15s ease-out, color 0.15s ease-out, transform 0.15s ease-out !important;
				}
				
				button:hover {
					transform: translateY(-1px);
				}
				
				button:active {
					transform: translateY(0);
				}
				
				.htmx-request {
					opacity: 0.8;
					transition: opacity 0.2s ease-in-out !important;
				}
				
				.htmx-indicator {
					display: none;
				}
				
				.htmx-request .htmx-indicator {
					display: inline;
				}
				
				/* CSS Spinner */
				.css-spinner {
					width: 16px;
					height: 16px;
					border: 2px solid var(--pico-color-grey-300);
					border-top: 2px solid var(--pico-primary-600);
					border-radius: 50%;
					animation: css-spin 1s linear infinite;
				}
				
				[data-theme="dark"] .css-spinner {
					border-color: var(--pico-color-grey-600);
					border-top-color: var(--pico-primary-600);
				}
				
				@keyframes css-spin {
					0% { transform: rotate(0deg); }
					100% { transform: rotate(360deg); }
				}
				
				/* Ultra-subtle page transition indicator */
				.page-loading {
					position: fixed;
					top: 0;
					left: 0;
					width: 100%;
					height: 2px;
					background: linear-gradient(90deg, var(--pico-primary-600), var(--pico-primary-700), var(--pico-primary-600));
					background-size: 200% 100%;
					z-index: 9999;
					opacity: 0;
					transform: scaleX(0);
					transform-origin: left;
					transition: opacity 0.1s ease-out, transform 0.15s ease-out;
				}
				
				.page-loading.active {
					opacity: 0.8;
					transform: scaleX(1);
					animation: shimmer 0.8s ease-in-out;
				}
				
				@keyframes shimmer {
					0% { background-position: 200% 0; }
					100% { background-position: -200% 0; }
				}
				
				/* Navigation link styling for HTMX */
				nav a[hx-get] {
					position: relative;
					transition: all 0.15s ease-out !important;
				}
				
				nav a[hx-get]:hover {
					transform: translateY(-1px);
					text-decoration: none;
				}
				
				nav a[hx-get]:active {
					transform: translateY(0);
				}
				
				/* Success/error flash messages */
				.flash {
					padding: 1rem;
					margin: 1rem 0;
					border-radius: var(--pico-border-radius);
				}
				
				.flash.success {
					background-color: var(--pico-color-green-100);
					color: var(--pico-color-green-800);
					border: 1px solid var(--pico-color-green-200);
				}
				
				.flash.error {
					background-color: var(--pico-color-red-100);
					color: var(--pico-color-red-800);
					border: 1px solid var(--pico-color-red-200);
				}
				
				[data-theme="dark"] .flash.success {
					background-color: var(--pico-color-green-900);
					color: var(--pico-color-green-100);
					border-color: var(--pico-color-green-700);
				}
				
				[data-theme="dark"] .flash.error {
					background-color: var(--pico-color-red-900);
					color: var(--pico-color-red-100);
					border-color: var(--pico-color-red-700);
				}
				
				/* Smooth animations */
				@keyframes fadeIn {
					from { opacity: 0; transform: translateY(8px); }
					to { opacity: 1; transform: translateY(0); }
				}
				
				@keyframes slideIn {
					from { opacity: 0; transform: translateX(-10px); }
					to { opacity: 1; transform: translateX(0); }
				}
				
				.fade-in {
					animation: fadeIn 0.2s ease-out;
				}
				
				.slide-in {
					animation: slideIn 0.2s ease-out;
				}
				
				/* User avatar */
				.avatar {
					width: 2rem;
					height: 2rem;
					border-radius: 50%;
					object-fit: cover;
				}
				
				.avatar-lg {
					width: 4rem;
					height: 4rem;
				}
			</style>
		</head>
		<body>
			<header>
				<nav class="container">
					<ul>
						<li>
							<strong>
								<a href="/" class="contrast">
									Go Web Server
								</a>
							</strong>
						</li>
					</ul>
					<ul>
						<li>
							<a
								href="/"
								hx-get="/"
								hx-target="main"
								hx-swap="innerHTML swap:0s settle:0s"
								hx-push-url="true"
							>Home</a>
						</li>
						<li>
							<a
								href="/users"
								hx-get="/users"
								hx-target="main"
								hx-swap="innerHTML swap:0s settle:0s"
								hx-push-url="true"
							>Users</a>
						</li>
						<li>
							<details role="list">
								<summary aria-haspopup="listbox" role="button">Theme</summary>
								<ul role="listbox">
									<li><a onclick="setTheme('auto')" href="#">Auto</a></li>
									<li><a onclick="setTheme('light')" href="#">Light</a></li>
									<li><a onclick="setTheme('dark')" href="#">Dark</a></li>
								</ul>
							</details>
						</li>
					</ul>
				</nav>
			</header>
			<div id="page-loading" class="page-loading"></div>
			<main class="container">
				<div id="flash-messages"></div>
				{ children... }
			</main>
			<footer class="container">
				<hr/>
				<div class="grid">
					<div>
						<p><small>Built with Go 1.24, Echo, templ, HTMX 2.x, and Pico.css v2 &copy; 2025</small></p>
					</div>
					<div style="text-align: right;">
						<p>
							<small>
								<a
									href="/health"
									hx-get="/health"
									hx-trigger="click"
									hx-swap="innerHTML"
									class="contrast"
								>
									Health Check
								</a>
							</small>
						</p>
					</div>
				</div>
			</footer>
			<script>
				// Theme switcher with localStorage persistence
				function setTheme(theme) {
					document.documentElement.setAttribute('data-theme', theme);
					localStorage.setItem('preferred-theme', theme);
				}
				
				// Initialize theme on page load
				document.addEventListener('DOMContentLoaded', function() {
					const savedTheme = localStorage.getItem('preferred-theme') || 'auto';
					setTheme(savedTheme);
				});
				
				// HTMX configuration for smooth page transitions
				document.addEventListener('DOMContentLoaded', function() {
					// Configure HTMX globally for smooth SPA-like experience
					htmx.config.globalViewTransitions = true;
					htmx.config.defaultSwapStyle = 'innerHTML';
					htmx.config.requestClass = 'htmx-request';
					htmx.config.timeout = 10000;
					htmx.config.defaultSwapDelay = 0;
					htmx.config.defaultSettleDelay = 0;
					
					// Ultra-smooth SPA-like page transitions
					const pageLoading = document.getElementById('page-loading');
					
					// Minimal loading indication for page navigation
					document.body.addEventListener('htmx:beforeRequest', function(evt) {
						if (evt.detail.target.tagName === 'MAIN') {
							pageLoading.classList.add('active');
						}
					});
					
					// Instant and smooth content transitions
					document.body.addEventListener('htmx:beforeSwap', function(evt) {
						if (evt.detail.target.tagName === 'MAIN') {
							// Prep for ultra-smooth transition
							evt.detail.target.style.transition = 'none';
							evt.detail.target.style.opacity = '0.9';
						}
					});
					
					document.body.addEventListener('htmx:afterSwap', function(evt) {
						if (evt.detail.target.tagName === 'MAIN') {
							pageLoading.classList.remove('active');
							
							// Immediate smooth fade-in
							const target = evt.detail.target;
							target.style.opacity = '0';
							target.style.transform = 'translateY(3px)';
							target.style.transition = 'opacity 0.15s ease-out, transform 0.15s ease-out';
							
							// Ultra-fast animation using RAF
							requestAnimationFrame(() => {
								requestAnimationFrame(() => {
									target.style.opacity = '1';
									target.style.transform = 'translateY(0)';
								});
							});
							
							// Re-initialize theme
							const savedTheme = localStorage.getItem('preferred-theme') || 'auto';
							setTheme(savedTheme);
						}
					});
					
					// Handle errors
					document.body.addEventListener('htmx:responseError', function(evt) {
						pageLoading.classList.remove('active');
						showFlash('Failed to load page. Please try again.', 'error');
					});
					
					document.body.addEventListener('htmx:timeout', function(evt) {
						pageLoading.classList.remove('active');
						showFlash('Request timed out. Please try again.', 'error');
					});
					
					// Handle successful operations (but not for demo area or main content)
					document.body.addEventListener('htmx:afterRequest', function(evt) {
						if (evt.detail.xhr.status >= 200 && evt.detail.xhr.status < 300 && 
						    evt.detail.target.tagName !== 'MAIN' &&
						    evt.detail.target.id !== 'demo-area') {
							showFlash('Operation completed successfully!', 'success');
						}
					});
				});
				
				// Flash message system
				function showFlash(message, type) {
					const flashContainer = document.getElementById('flash-messages');
					if (!flashContainer) {
						console.warn('Flash messages container not found');
						return;
					}
					
					const flash = document.createElement('div');
					flash.className = `flash ${type} fade-in`;
					flash.textContent = message;
					
					flashContainer.innerHTML = '';
					flashContainer.appendChild(flash);
					
					// Auto-remove after 5 seconds
					setTimeout(() => {
						if (flash.parentNode) {
							flash.remove();
						}
					}, 5000);
				}
			</script>
		</body>
	</html>
}
