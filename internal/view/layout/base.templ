package layout

templ Base(title string) {
	@BaseWithCSRF(title, "")
}

templ BaseWithCSRF(title, csrfToken string) {
	<!DOCTYPE html>
	<html lang="en" data-theme="dark">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover"/>
			<meta name="color-scheme" content="light dark"/>
			<meta name="description" content="Modern Go Web Server Template with Echo, templ, HTMX, and Pico.css"/>
			<title>{ title } - Go Web Server</title>
			<link rel="icon" type="image/x-icon" href="/static/favicon.ico"/>
			<link rel="preconnect" href="https://fonts.googleapis.com"/>
			<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
			<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet"/>
			<link rel="stylesheet" href="/static/css/pico.min.css"/>
			<link rel="stylesheet" href="/static/css/theme.css"/>
			<link rel="stylesheet" href="/static/css/animations.css"/>
			<link rel="stylesheet" href="/static/css/components.css"/>
			<link rel="stylesheet" href="/static/css/layout.css"/>
			<script src="/static/js/htmx.min.js"></script>
			<meta name="csrf-header" content="X-CSRF-Token"/>
			if csrfToken != "" {
				<meta name="csrf-token" content={ csrfToken }/>
			}
			<meta name="htmx-config" content='{"globalViewTransitions": true, "requestClass": "htmx-request", "timeout": 10000}'/>
		</head>
		<body>
			<header>
				<nav class="container">
					<ul>
						<li>
							<strong>
								<a href="/" class="contrast">
									Go Web Server
								</a>
							</strong>
						</li>
					</ul>
					<ul>
						<li>
							<a
								href="/"
								hx-get="/"
								hx-target="main"
								hx-swap="innerHTML swap:0s settle:0s"
								hx-push-url="true"
							>Home</a>
						</li>
						<li>
							<a
								href="/users"
								hx-get="/users"
								hx-target="main"
								hx-swap="innerHTML swap:0s settle:0s"
								hx-push-url="true"
							>Users</a>
						</li>
						<li>
							<a
								href="/auth/login"
								hx-get="/auth/login"
								hx-target="main"
								hx-swap="innerHTML swap:0s settle:0s"
								hx-push-url="true"
							>Login</a>
						</li>
						<li>
							<a
								href="/profile"
								hx-get="/profile"
								hx-target="main"
								hx-swap="innerHTML swap:0s settle:0s"
								hx-push-url="true"
							>Profile</a>
						</li>
						<li>
							<details role="list">
								<summary aria-haspopup="listbox" role="button">Theme</summary>
								<ul role="listbox">
									<li><a onclick="setTheme('auto')" href="#">Auto</a></li>
									<li><a onclick="setTheme('light')" href="#">Light</a></li>
									<li><a onclick="setTheme('dark')" href="#">Dark</a></li>
								</ul>
							</details>
						</li>
					</ul>
				</nav>
			</header>
			<div id="page-loading" class="page-loading"></div>
			<main class="container">
				<div id="flash-messages"></div>
				{ children... }
			</main>
			<footer class="container">
				<hr/>
				<div class="grid">
					<div>
						<p><small>Built with Go 1.24, Echo, templ, HTMX 2.x, and Pico.css v2 &copy; 2025</small></p>
					</div>
					<div style="text-align: right;">
						<p>
							<small>
								<a
									href="/health"
									hx-get="/health"
									hx-trigger="click"
									hx-swap="innerHTML"
									class="contrast"
								>
									Health Check
								</a>
							</small>
						</p>
					</div>
				</div>
			</footer>
			<script>
				// Theme switcher with localStorage persistence
				function setTheme(theme) {
					document.documentElement.setAttribute('data-theme', theme);
					localStorage.setItem('preferred-theme', theme);
				}
				
				// Initialize theme on page load
				document.addEventListener('DOMContentLoaded', function() {
					const savedTheme = localStorage.getItem('preferred-theme') || 'dark';
					setTheme(savedTheme);
				});
				
				// HTMX configuration for smooth page transitions
				document.addEventListener('DOMContentLoaded', function() {
					// Configure HTMX globally for smooth SPA-like experience
					htmx.config.globalViewTransitions = true;
					htmx.config.defaultSwapStyle = 'innerHTML';
					htmx.config.requestClass = 'htmx-request';
					htmx.config.timeout = 10000;
					htmx.config.defaultSwapDelay = 0;
					htmx.config.defaultSettleDelay = 0;
					
					// Track current CSRF token
					let currentCSRFToken = null;
					
					// Update hidden CSRF token fields
					const updateCSRFTokenFields = (token) => {
						const csrfFields = document.querySelectorAll('input[name="csrf_token"]');
						csrfFields.forEach(field => {
							field.value = token;
						});
					};
					
					// Initialize CSRF token from page load or fetch it
					const initializeCSRFToken = () => {
						// First try to get token from a meta tag (set by server)
						const metaToken = document.querySelector('meta[name="csrf-token"]');
						if (metaToken) {
							currentCSRFToken = metaToken.getAttribute('content');
							updateCSRFTokenFields(currentCSRFToken);
							return;
						}
						
						// If no meta token, make a request to get one from a safe endpoint
						fetch('/', {
							method: 'GET',
							headers: {
								'X-Requested-With': 'XMLHttpRequest'
							}
						}).then(response => {
							const token = response.headers.get('X-CSRF-Token');
							if (token) {
								currentCSRFToken = token;
								updateCSRFTokenFields(currentCSRFToken);
							}
						}).catch(e => {
							console.warn('Failed to initialize CSRF token:', e);
						});
					};
					
					// Initialize CSRF token on page load
					initializeCSRFToken();
					
					// Configure CSRF token handling
					document.body.addEventListener('htmx:configRequest', function(evt) {
						if (currentCSRFToken) {
							evt.detail.headers['X-CSRF-Token'] = currentCSRFToken;
						}
					});
					
					// Update CSRF token from responses
					document.body.addEventListener('htmx:afterRequest', function(evt) {
						const newToken = evt.detail.xhr.getResponseHeader('X-CSRF-Token');
						if (newToken) {
							currentCSRFToken = newToken;
							updateCSRFTokenFields(currentCSRFToken);
						}
					});
					
					// Ultra-smooth SPA-like page transitions
					const pageLoading = document.getElementById('page-loading');
					
					// Minimal loading indication for page navigation
					document.body.addEventListener('htmx:beforeRequest', function(evt) {
						if (evt.detail.target.tagName === 'MAIN') {
							pageLoading.classList.add('active');
						}
					});
					
					// Instant and smooth content transitions
					document.body.addEventListener('htmx:beforeSwap', function(evt) {
						if (evt.detail.target.tagName === 'MAIN') {
							// Prep for ultra-smooth transition
							evt.detail.target.style.transition = 'none';
							evt.detail.target.style.opacity = '0.9';
						}
					});
					
					document.body.addEventListener('htmx:afterSwap', function(evt) {
						if (evt.detail.target.tagName === 'MAIN') {
							pageLoading.classList.remove('active');
							
							// Immediate smooth fade-in
							const target = evt.detail.target;
							target.style.opacity = '0';
							target.style.transform = 'translateY(3px)';
							target.style.transition = 'opacity 0.15s ease-out, transform 0.15s ease-out';
							
							// Ultra-fast animation using RAF
							requestAnimationFrame(() => {
								requestAnimationFrame(() => {
									target.style.opacity = '1';
									target.style.transform = 'translateY(0)';
								});
							});
							
							// Re-initialize theme
							const savedTheme = localStorage.getItem('preferred-theme') || 'dark';
							setTheme(savedTheme);
							
							// Update CSRF tokens in new content
							if (currentCSRFToken) {
								updateCSRFTokenFields(currentCSRFToken);
							}
						}
					});
					
					// Handle errors
					document.body.addEventListener('htmx:responseError', function(evt) {
						pageLoading.classList.remove('active');
						let errorMessage = 'Request failed. Please try again.';
						
						// Handle specific error codes
						if (evt.detail.xhr.status === 403) {
							errorMessage = 'Access forbidden. Please refresh the page and try again.';
							// Try to refresh CSRF token
							initializeCSRFToken();
						} else if (evt.detail.xhr.status === 400) {
							errorMessage = 'Invalid request. Please check your input and try again.';
						} else if (evt.detail.xhr.status === 401) {
							errorMessage = 'Authentication required. Please log in.';
						} else if (evt.detail.xhr.status >= 500) {
							errorMessage = 'Server error. Please try again later.';
						}
						
						showFlash(errorMessage, 'error');
					});
					
					document.body.addEventListener('htmx:timeout', function(evt) {
						pageLoading.classList.remove('active');
						showFlash('Request timed out. Please try again.', 'error');
					});
					
					// Handle successful operations (only for actual user actions, not data loading)
					document.body.addEventListener('htmx:afterRequest', function(evt) {
						if (evt.detail.xhr.status >= 200 && evt.detail.xhr.status < 300 && 
						    evt.detail.target.tagName !== 'MAIN' &&
						    evt.detail.target.id !== 'demo-area' &&
						    // Only show flash for write operations (POST, PUT, PATCH, DELETE)
						    ['POST', 'PUT', 'PATCH', 'DELETE'].includes(evt.detail.xhr.method || evt.detail.requestConfig.verb)) {
							showFlash('Operation completed successfully!', 'success');
						}
					});
				});
				
				// Flash message system
				function showFlash(message, type) {
					// Wait for DOM to be ready if needed
					const showFlashMessage = () => {
						const flashContainer = document.getElementById('flash-messages');
						if (!flashContainer) {
							console.warn('Flash messages container not found');
							return;
						}
						
						const flash = document.createElement('div');
						flash.className = `flash ${type} fade-in`;
						flash.textContent = message;
						
						flashContainer.innerHTML = '';
						flashContainer.appendChild(flash);
						
						// Auto-remove after 5 seconds
						setTimeout(() => {
							if (flash.parentNode) {
								flash.remove();
							}
						}, 5000);
					};
					
					// Use a more robust method to ensure DOM is ready
					const tryShowFlash = () => {
						const flashContainer = document.getElementById('flash-messages');
						if (flashContainer) {
							showFlashMessage();
						} else {
							// Retry up to 10 times with increasing delays
							let attempts = 0;
							const checkForContainer = () => {
								attempts++;
								const container = document.getElementById('flash-messages');
								if (container) {
									showFlashMessage();
								} else if (attempts < 10) {
									setTimeout(checkForContainer, attempts * 50);
								} else {
									console.warn('Flash messages container not found after multiple attempts');
								}
							};
							setTimeout(checkForContainer, 50);
						}
					};
					
					if (document.readyState === 'loading') {
						document.addEventListener('DOMContentLoaded', tryShowFlash);
					} else {
						tryShowFlash();
					}
				}
			</script>
		</body>
	</html>
}
