// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.924
package layout

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import (
	"github.com/a-h/templ"
	templruntime "github.com/a-h/templ/runtime"
)

func Base(title string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = BaseWithCSRF(title, "").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func BaseWithCSRF(title, csrfToken string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\" data-theme=\"dark\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1, viewport-fit=cover\"><meta name=\"color-scheme\" content=\"light dark\"><meta name=\"description\" content=\"Modern Go Web Server Template with Echo, templ, HTMX, and Pico.css\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/view/layout/base.templ`, Line: 15, Col: 17}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, " - Go Web Server</title><link rel=\"icon\" type=\"image/x-icon\" href=\"/static/favicon.ico\"><link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"><link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin><link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\"><link rel=\"stylesheet\" href=\"/static/css/pico.min.css\"><link rel=\"stylesheet\" href=\"/static/css/theme.css\"><link rel=\"stylesheet\" href=\"/static/css/animations.css\"><link rel=\"stylesheet\" href=\"/static/css/components.css\"><link rel=\"stylesheet\" href=\"/static/css/layout.css\"><script src=\"/static/js/htmx.min.js\"></script><meta name=\"csrf-header\" content=\"X-CSRF-Token\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if csrfToken != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<meta name=\"csrf-token\" content=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(csrfToken)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/view/layout/base.templ`, Line: 28, Col: 47}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<meta name=\"htmx-config\" content='{\"globalViewTransitions\": true, \"requestClass\": \"htmx-request\", \"timeout\": 10000}'></head><body><header><nav class=\"container\"><ul><li><strong><a href=\"/\" class=\"contrast\">Go Web Server</a></strong></li></ul><ul><li><a href=\"/\" hx-get=\"/\" hx-target=\"main\" hx-swap=\"innerHTML swap:0s settle:0s\" hx-push-url=\"true\">Home</a></li><li><a href=\"/users\" hx-get=\"/users\" hx-target=\"main\" hx-swap=\"innerHTML swap:0s settle:0s\" hx-push-url=\"true\">Users</a></li><li><a href=\"/auth/login\" hx-get=\"/auth/login\" hx-target=\"main\" hx-swap=\"innerHTML swap:0s settle:0s\" hx-push-url=\"true\">Login</a></li><li><a href=\"/profile\" hx-get=\"/profile\" hx-target=\"main\" hx-swap=\"innerHTML swap:0s settle:0s\" hx-push-url=\"true\">Profile</a></li><li><details role=\"list\"><summary aria-haspopup=\"listbox\" role=\"button\">Theme</summary><ul role=\"listbox\"><li><a onclick=\"setTheme('auto')\" href=\"#\">Auto</a></li><li><a onclick=\"setTheme('light')\" href=\"#\">Light</a></li><li><a onclick=\"setTheme('dark')\" href=\"#\">Dark</a></li></ul></details></li></ul></nav></header><div id=\"page-loading\" class=\"page-loading\"></div><main class=\"container\"><div id=\"flash-messages\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var2.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</main><footer class=\"container\"><hr><div class=\"grid\"><div><p><small>Built with Go 1.24, Echo, templ, HTMX 2.x, and Pico.css v2 &copy; 2025</small></p></div><div style=\"text-align: right;\"><p><small><a href=\"/health\" hx-get=\"/health\" hx-trigger=\"click\" hx-swap=\"innerHTML\" class=\"contrast\">Health Check</a></small></p></div></div></footer><script>\n\t\t\t\t// Theme switcher with localStorage persistence\n\t\t\t\tfunction setTheme(theme) {\n\t\t\t\t\tdocument.documentElement.setAttribute('data-theme', theme);\n\t\t\t\t\tlocalStorage.setItem('preferred-theme', theme);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Initialize theme on page load\n\t\t\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\t\t\tconst savedTheme = localStorage.getItem('preferred-theme') || 'dark';\n\t\t\t\t\tsetTheme(savedTheme);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// HTMX configuration for smooth page transitions\n\t\t\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\t\t\t// Configure HTMX globally for smooth SPA-like experience\n\t\t\t\t\thtmx.config.globalViewTransitions = true;\n\t\t\t\t\thtmx.config.defaultSwapStyle = 'innerHTML';\n\t\t\t\t\thtmx.config.requestClass = 'htmx-request';\n\t\t\t\t\thtmx.config.timeout = 10000;\n\t\t\t\t\thtmx.config.defaultSwapDelay = 0;\n\t\t\t\t\thtmx.config.defaultSettleDelay = 0;\n\t\t\t\t\t\n\t\t\t\t\t// Track current CSRF token\n\t\t\t\t\tlet currentCSRFToken = null;\n\t\t\t\t\t\n\t\t\t\t\t// Initialize CSRF token from page load or fetch it\n\t\t\t\t\tconst initializeCSRFToken = () => {\n\t\t\t\t\t\t// First try to get token from a meta tag (set by server)\n\t\t\t\t\t\tconst metaToken = document.querySelector('meta[name=\"csrf-token\"]');\n\t\t\t\t\t\tif (metaToken) {\n\t\t\t\t\t\t\tcurrentCSRFToken = metaToken.getAttribute('content');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// If no meta token, make a request to get one\n\t\t\t\t\t\tfetch('/users', {\n\t\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t'X-Requested-With': 'XMLHttpRequest'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}).then(response => {\n\t\t\t\t\t\t\tconst token = response.headers.get('X-CSRF-Token');\n\t\t\t\t\t\t\tif (token) {\n\t\t\t\t\t\t\t\tcurrentCSRFToken = token;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}).catch(e => {\n\t\t\t\t\t\t\tconsole.warn('Failed to initialize CSRF token:', e);\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// Initialize CSRF token on page load\n\t\t\t\t\tinitializeCSRFToken();\n\t\t\t\t\t\n\t\t\t\t\t// Configure CSRF token handling\n\t\t\t\t\tdocument.body.addEventListener('htmx:configRequest', function(evt) {\n\t\t\t\t\t\tif (currentCSRFToken) {\n\t\t\t\t\t\t\tevt.detail.headers['X-CSRF-Token'] = currentCSRFToken;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t// Update CSRF token from responses\n\t\t\t\t\tdocument.body.addEventListener('htmx:afterRequest', function(evt) {\n\t\t\t\t\t\tconst newToken = evt.detail.xhr.getResponseHeader('X-CSRF-Token');\n\t\t\t\t\t\tif (newToken) {\n\t\t\t\t\t\t\tcurrentCSRFToken = newToken;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t// Ultra-smooth SPA-like page transitions\n\t\t\t\t\tconst pageLoading = document.getElementById('page-loading');\n\t\t\t\t\t\n\t\t\t\t\t// Minimal loading indication for page navigation\n\t\t\t\t\tdocument.body.addEventListener('htmx:beforeRequest', function(evt) {\n\t\t\t\t\t\tif (evt.detail.target.tagName === 'MAIN') {\n\t\t\t\t\t\t\tpageLoading.classList.add('active');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t// Instant and smooth content transitions\n\t\t\t\t\tdocument.body.addEventListener('htmx:beforeSwap', function(evt) {\n\t\t\t\t\t\tif (evt.detail.target.tagName === 'MAIN') {\n\t\t\t\t\t\t\t// Prep for ultra-smooth transition\n\t\t\t\t\t\t\tevt.detail.target.style.transition = 'none';\n\t\t\t\t\t\t\tevt.detail.target.style.opacity = '0.9';\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tdocument.body.addEventListener('htmx:afterSwap', function(evt) {\n\t\t\t\t\t\tif (evt.detail.target.tagName === 'MAIN') {\n\t\t\t\t\t\t\tpageLoading.classList.remove('active');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Immediate smooth fade-in\n\t\t\t\t\t\t\tconst target = evt.detail.target;\n\t\t\t\t\t\t\ttarget.style.opacity = '0';\n\t\t\t\t\t\t\ttarget.style.transform = 'translateY(3px)';\n\t\t\t\t\t\t\ttarget.style.transition = 'opacity 0.15s ease-out, transform 0.15s ease-out';\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Ultra-fast animation using RAF\n\t\t\t\t\t\t\trequestAnimationFrame(() => {\n\t\t\t\t\t\t\t\trequestAnimationFrame(() => {\n\t\t\t\t\t\t\t\t\ttarget.style.opacity = '1';\n\t\t\t\t\t\t\t\t\ttarget.style.transform = 'translateY(0)';\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Re-initialize theme\n\t\t\t\t\t\t\tconst savedTheme = localStorage.getItem('preferred-theme') || 'dark';\n\t\t\t\t\t\t\tsetTheme(savedTheme);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t// Handle errors\n\t\t\t\t\tdocument.body.addEventListener('htmx:responseError', function(evt) {\n\t\t\t\t\t\tpageLoading.classList.remove('active');\n\t\t\t\t\t\tshowFlash('Failed to load page. Please try again.', 'error');\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tdocument.body.addEventListener('htmx:timeout', function(evt) {\n\t\t\t\t\t\tpageLoading.classList.remove('active');\n\t\t\t\t\t\tshowFlash('Request timed out. Please try again.', 'error');\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t// Handle successful operations (only for actual user actions, not data loading)\n\t\t\t\t\tdocument.body.addEventListener('htmx:afterRequest', function(evt) {\n\t\t\t\t\t\tif (evt.detail.xhr.status >= 200 && evt.detail.xhr.status < 300 && \n\t\t\t\t\t\t    evt.detail.target.tagName !== 'MAIN' &&\n\t\t\t\t\t\t    evt.detail.target.id !== 'demo-area' &&\n\t\t\t\t\t\t    // Only show flash for write operations (POST, PUT, PATCH, DELETE)\n\t\t\t\t\t\t    ['POST', 'PUT', 'PATCH', 'DELETE'].includes(evt.detail.xhr.method || evt.detail.requestConfig.verb)) {\n\t\t\t\t\t\t\tshowFlash('Operation completed successfully!', 'success');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// Flash message system\n\t\t\t\tfunction showFlash(message, type) {\n\t\t\t\t\t// Wait for DOM to be ready if needed\n\t\t\t\t\tconst showFlashMessage = () => {\n\t\t\t\t\t\tconst flashContainer = document.getElementById('flash-messages');\n\t\t\t\t\t\tif (!flashContainer) {\n\t\t\t\t\t\t\tconsole.warn('Flash messages container not found');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst flash = document.createElement('div');\n\t\t\t\t\t\tflash.className = `flash ${type} fade-in`;\n\t\t\t\t\t\tflash.textContent = message;\n\t\t\t\t\t\t\n\t\t\t\t\t\tflashContainer.innerHTML = '';\n\t\t\t\t\t\tflashContainer.appendChild(flash);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Auto-remove after 5 seconds\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tif (flash.parentNode) {\n\t\t\t\t\t\t\t\tflash.remove();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 5000);\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// Use a more robust method to ensure DOM is ready\n\t\t\t\t\tconst tryShowFlash = () => {\n\t\t\t\t\t\tconst flashContainer = document.getElementById('flash-messages');\n\t\t\t\t\t\tif (flashContainer) {\n\t\t\t\t\t\t\tshowFlashMessage();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Retry up to 10 times with increasing delays\n\t\t\t\t\t\t\tlet attempts = 0;\n\t\t\t\t\t\t\tconst checkForContainer = () => {\n\t\t\t\t\t\t\t\tattempts++;\n\t\t\t\t\t\t\t\tconst container = document.getElementById('flash-messages');\n\t\t\t\t\t\t\t\tif (container) {\n\t\t\t\t\t\t\t\t\tshowFlashMessage();\n\t\t\t\t\t\t\t\t} else if (attempts < 10) {\n\t\t\t\t\t\t\t\t\tsetTimeout(checkForContainer, attempts * 50);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tconsole.warn('Flash messages container not found after multiple attempts');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tsetTimeout(checkForContainer, 50);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tif (document.readyState === 'loading') {\n\t\t\t\t\t\tdocument.addEventListener('DOMContentLoaded', tryShowFlash);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttryShowFlash();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
